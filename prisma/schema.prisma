// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum UnitOfMeasure {
  QUANTITY
  WEIGHT
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  name          String
  password_hash String
  gender        Gender
  avatar_url    String?
  is_admin      Boolean  @default(false)
  is_premium    Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  couple_id Int?

  refresh_tokens   UserRefreshToken[]
  couple_invites   CoupleInvite[]     @relation(name: "InviterRelation")
  couple           Couple?            @relation(fields: [couple_id], references: [id])
  ShoppingLists    ShoppingList[]
  ShoppingListItem ShoppingListItem[]
}

model CoupleInvite {
  id            Int       @id @default(autoincrement())
  inviter_id    Int
  invitee_email String
  invited_at    DateTime  @default(now())
  accepted_at   DateTime?
  rejected_at   DateTime?

  inviter User @relation(name: "InviterRelation", fields: [inviter_id], references: [id])
}

model Couple {
  id            Int            @id @default(autoincrement())
  invite_id     Int
  inviter_id    Int
  invitee_id    Int
  created_at    DateTime       @default(now())
  is_active     Boolean        @default(true)

  User          User[]
  Product       Product[]
  ShoppingLists ShoppingList[]
}

model UserRefreshToken {
  id         Int      @id @default(autoincrement())
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  expires_at DateTime
}

model Product {
  id              Int           @id @default(autoincrement())
  name            String        @unique
  unit_of_measure UnitOfMeasure
  couple_id       Int

  items ShoppingListItem[]
  couple Couple @relation(fields: [couple_id], references: [id])
}

model ShoppingListItem {
  id               Int      @id @default(autoincrement())
  is_checked       Boolean  @default(false)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  quantity         Int      @default(1)
  unit_price       Decimal?
  shopping_list_id Int
  product_id       Int
  author_id        Int

  shopping_list ShoppingList @relation(fields: [shopping_list_id], references: [id])
  product       Product      @relation(fields: [product_id], references: [id])
  author        User         @relation(fields: [author_id], references: [id])
}

model ShoppingList {
  id         Int       @id @default(autoincrement())
  name       String?
  couple_id  Int
  author_id  Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  closed_at  DateTime?

  author           User               @relation(fields: [author_id], references: [id])
  couple           Couple             @relation(fields: [couple_id], references: [id])
  ShoppingListItem ShoppingListItem[]
}
